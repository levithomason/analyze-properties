// ------------------------------------------------------------
// Paths
// ------------------------------------------------------------

// TODO fix this!  We mount to `/analyses` all over the app, need to mount to user id paths only.
path / {
  read() { isAuthenticated() }
}

path /analyses/{uid} {
  read() { isCurrentUser(uid) }
  write() { isCurrentUser(uid) }

  /{propertyId} is Analysis;
}

path /criteria/{uid} is Criteria {
  read() { isCurrentUser(uid) }
  write() { isCurrentUser(uid) }
}

// path /presence is UserIDFlag {
//   read() { isAuthenticated() }
//
//   /{uid} {
//     create() { isCurrentUser(uid) }
//     update() { isCurrentUser(uid) }
//     delete() { prior(this) == auth.uid }
//   }
// }

path /roles {
  write() { isSuperAdmin() }

  /{role} is UserIDFlag {
    /{uid} {
      read() { isCurrentUser(uid) }
    }
  }
}

// path /sessions {
//   read() { isAuthenticated() }
//
//   /{id} {
//     create() { isCurrentUser(this.user) }
//     update() { isCurrentUser(this.user) }
//     delete() { prior(this.user) == auth.uid }
//
//     /startedAt is PastTimestamp;
//     /endedAt is PastTimestamp;
//     /user is CurrentUserID;
//   }
// }

path /users/{uid} is User {
  create() { isAuthenticated() }
  read() { isCurrentUser(uid) }
  update() { isSuperAdmin() || isCurrentUser(uid) }
  delete() { isSuperAdmin() }
}

path /validRoles {
  read() { isSuperAdmin() }
  write() { isSuperAdmin() }
}

// ------------------------------------------------------------
// Types
// ------------------------------------------------------------
type Analyses {
  $uid: Map<ExistingUserID, Analysis>,
}

type Analysis {
  //
  // Worksheet
  //

  // user
  favorite: Boolean,
  notes: String,

  // property info
  propertyId: String | Number,
  image: String,
  url: String,
  address: String,
  city: String,
  state: String,
  zip: String,
  county: String,
  lat: Number,
  lon: Number,
  type: String,
  year: Number,
  beds: Number,
  baths: Number,
  mlsNumber: String,
  sqft: Number,
  lotAcres: Number,

  // price
  purchasePrice: Number,
  afterRepairValue: Number,

  // value
  marketValue: Number,
  landValue: Number,

  // financing
  isFinanced: Boolean,
  downRate: Number,
  downAmount: Number,
  rate: Number,
  term: Number,
  mortgageInsuranceUpfrontRate: Number,
  mortgageInsuranceRecurringRate: Number,

  // purchase costs
  purchaseCostsRate: Number,
  purchaseCostsAmount: Number,

  // rehab costs
  rehabCosts: Number,

  // income
  grossMonthlyRent: Number,
  grossPotentialRent: Number,
  otherIncome: Number,

  // expenses
  operatingExpenseRate: Number,
  taxes: Number,
  insurance: Number,
  managementRate: Number,
  maintenanceRate: Number,
  capitalExpendituresRate: Number,
  otherExpenses: Number,

  // assumptions
  vacancyRate: Number,
  appreciationRate: Number,
  incomeIncreaseRate: Number,
  expenseIncreaseRate: Number,
  sellingCostRate: Number,

  //
  // Crunch
  //

  // Purchase & Rehab
  amountFinanced: Number,
  loanToValue: Number,
  totalCashNeeded: Number,
  equity: Number,

  // Operation
  operatingExpenseAmount: Number,
  operatingIncome: Number,
  netOperatingIncome: Number,
  debtService: Number,
  cashFlow: Number,

  // Returns
  sellingCostsAmount: Number,

  capRate: Number,
  cashOnCash: Number,
  returnOnInvestment: Number,

  // Ratios
  rentToValue: Number,
  grossRentMultiplier: Number,
  debtServiceCoverageRatio: Number,
}

type Criteria {
  // purchase criteria
  cashFlow: MinMaxObject,
  capRate: MinMaxObject,
  rentToValue: MinMaxObject,
  totalCashNeeded: MinMaxObject,
  netOperatingIncome: MinMaxObject,
  cashOnCash: MinMaxObject,
  grossRentMultiplier: MinMaxObject,
  debtServiceCoverageRatio: MinMaxObject,
  internalRateOfReturn: MinMaxObject,

  // debt to income
  income: Number,
  mortgages: Number,
  otherDebts: Number,
}

type User {
  avatarUrl: String,
  displayName: String,
  email: String,
  photoURL: String | Null,
  providerData: Object | Null,
  roles: Object | Null,
}

// ------------------------------------------------------------
// Helper Types
// ------------------------------------------------------------
type ExistingUserID extends String {
  validate() { doesUserExist(this) }
}

type MinMaxObject extends Object {
  min: Number | Null,
  max: Number | Null
}

type CurrentUserID extends String {
  validate() { isCurrentUser(this) }
}

type PastTimestamp extends Number  {
  validate() { this <= now }
}

type UserIDFlag {
  $uid: Boolean,
}

// ------------------------------------------------------------
// Functions
// ------------------------------------------------------------
exists(val) { val != null }
isTrue(val) { val == true }
isCurrentUser(uid) { uid == auth.uid }

doesUserExist(uid) { exists(root.user[uid]) }
isAuthenticated() { exists(auth) }

hasRole(role) { isAuthenticated() && isTrue(root.roles[role][auth.uid]) }
isSuperAdmin() { hasRole('superAdmin') }
isApproved() { hasRole('approved') }
