// ------------------------------------------------------------
// Paths
// ------------------------------------------------------------

path / {
  read() { isSuperAdmin() }
}

path /analyses/{uid} is Analysis {
  read() { isCurrentUser(uid) }
  write() { isCurrentUser(uid) }
}

path /criteria/{uid} is Criteria {
  read() { isCurrentUser(uid) }
  write() { isCurrentUser(uid) }
}

// path /presence is UserIDFlag {
//   read() { isAuthenticated() }
//
//   /{uid} {
//     create() { isCurrentUser(uid) }
//     update() { isCurrentUser(uid) }
//     delete() { prior(this) == auth.uid }
//   }
// }

path /roles {
  write() { isSuperAdmin() }

  /{role} is UserIDFlag {
    /{uid} {
      read() { isCurrentUser(uid) }
    }
  }
}

// path /sessions {
//   read() { isAuthenticated() }
//
//   /{id} {
//     create() { isCurrentUser(this.user) }
//     update() { isCurrentUser(this.user) }
//     delete() { prior(this.user) == auth.uid }
//
//     /startedAt is PastTimestamp;
//     /endedAt is PastTimestamp;
//     /user is CurrentUserID;
//   }
// }

path /users/{uid} is User {
  create() { isAuthenticated() }
  read() { isCurrentUser(uid) }
  update() { isCurrentUser(uid) }
  delete() { isSuperAdmin() }
}

// ------------------------------------------------------------
// Types
// ------------------------------------------------------------
type Analyses {
  $uid: Map<ExistingUserID, Analysis>,
}

type Analysis {
  // property info
  favorite: Boolean,
  propertyId: String,
  image: String,
  url: String,
  address: String,
  city: String,
  state: String,
  zip: String,
  county: String,
  lat: PositiveNumber,
  lon: PositiveNumber,
  type: String,
  year: PositiveInteger,
  beds: PositiveInteger,
  baths: PositiveInteger,
  mlsNumber: String,
  sqft: PositiveInteger,
  lotAcres: PositiveNumber,

  // TODO trend data and comparison
  // TODO Tax benefit
  // price
  purchasePrice: PositiveNumber,
  afterRepairValue: PositiveNumber,

  // value
  marketValue: PositiveNumber,
  landValue: PositiveNumber,

  // financing
  isFinanced: Boolean,
  downRate: PositiveNumber,
  downAmount: PositiveInteger,
  rate: PositiveNumber,
  term: PositiveNumber,
  // TODO include in loan payment calc?
  mortgageInsuranceUpfrontRate: PositiveNumber,
  mortgageInsuranceRecurringRate: PositiveNumber,

  // purchase costs
  purchaseCostsRate: PositiveNumber,
  purchaseCostsAmount: PositiveNumber,

  // rehab costs
  rehabCosts: PositiveNumber,

  // income
  grossMonthlyRent: PositiveNumber,
  grossPotentialRent: PositiveNumber,
  otherIncome: PositiveNumber,

  // expenses
  operatingExpenseRate: PositiveNumber,
  taxes: PositiveNumber,
  insurance: PositiveNumber,
  managementRate: PositiveNumber,
  maintenanceRate: PositiveNumber,
  capitalExpendituresRate: PositiveNumber,
  otherExpenses: PositiveNumber,

  // assumptions
  vacancyRate: PositiveNumber,
  appreciationRate: PositiveNumber,
  incomeIncreaseRate: PositiveNumber,
  expenseIncreaseRate: PositiveNumber,
  sellingCostRate: PositiveNumber,
}

type Criteria {
  // purchase criteria
  cashFlow: PositiveInteger,
  capRate: PositiveNumber,
  rentToValue: PositiveNumber,
  totalCashNeeded: PositiveInteger,
  netOperatingIncome: PositiveInteger,
  cashOnCash: PositiveNumber,
  grossRentMultiplier: PositiveNumber,
  debtServiceCoverageRatio: PositiveNumber,
  internalRateOfReturn: PositiveNumber,

  // debt to income
  income: PositiveInteger,
  mortgages: PositiveInteger,
  otherDebts: PositiveInteger,
}

type User {
  avatarUrl: String,
  displayName: String,
  email: String,
  providerData: Object | Null,
}

// ------------------------------------------------------------
// Helper Types
// ------------------------------------------------------------
type ExistingUserID extends String {
  validate() { doesUserExist(this) }
}

type CurrentUserID extends String {
  validate() { isCurrentUser(this) }
}

type PastTimestamp extends Number  {
  validate() { this <= now }
}

type PositiveNumber extends Number {
  validate() { this >= 0 }
}

type PositiveInteger extends PositiveNumber {
  validate() { this % 1 == 0.0 }
}

type UserIDFlag {
  $uid: Boolean,
}

// ------------------------------------------------------------
// Functions
// ------------------------------------------------------------
exists(val) { val != null }
isTrue(val) { val == true }
isCurrentUser(uid) { uid == auth.uid }

doesUserExist(uid) { exists(root.user[uid]) }
isAuthenticated() { exists(auth) && isTrue(auth.token.email_verified) }

hasRole(role) { isAuthenticated() && isTrue(root.roles[role][auth.uid]) }
isSuperAdmin() { hasRole('superAdmin') }
isApproved() { hasRole('approved') }
